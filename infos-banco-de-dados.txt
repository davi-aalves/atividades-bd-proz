Modelo Entidade-Relacionamento (MER):
    É representado através de diagramas.
    As entidades são retângulos, atributos são elipses e relacionamentos são losangos.

    Os 3 tipos de relacionamentos de entidades:
        um para um (1, 1);
        um para muitos (1, n) ou muitos para um (n, 1);
        muitos para muitos (n, n);
    
    A entidade pode ser definida como um objeto do mundo real, concreto ou abstrato, com existência independente.

    Os atributos compõem um conjunto particular de propriedades atreladas à entidade.
    Exemplo de entidades e atributos:
        Uma pessoa é uma entidade e as suas características pessoais(Nome, Idade, Peso, Altura, CPF) são seus atributos.

    Os atributos podem ser classificados como:
       - Atributo simples: não pode ser subdividido; 
            Ex: CPF é um atributo simples por ser indivisível.
       - Atributo composto: pode ser dividido em diversas partes, com significados independentes entre si;
            Ex: Endereço, pois possui sobatributos, como cidade e estado.
       - Atributo monovalorado: ou simplesmente valorado, só assume um valor em uma determinada instância;
            Ex: Nome e/ou data_contratação, pois cada um possui um único valor.
       - Atributo multivalorado: pode assumir diversos valores em uma mesma instância;
            Ex: Telefone, pois uma pessoa(entidade), pode possuir diversos telefones.
       - Atributo derivado: é gerado a partir de outro atributo. 
            Ex: tempo_de_casa, pois um funcionário(entidade) precisou de um atributo data_contratação para tempo_de_casa existir.

Normalização de esquemas de bancos de dados e formas normais.
     - Se pensa em um aumento de tabela. (São desmembradas em tabelas mais específicas.)
     - Pode aumentar o custo de manutenção e comprometer a perfomance.
     - Deve ser realizada com bom senso, pois apresente melhorias no banco a medio e longo prazo.
     - É dividida em três formas normais:
          1 - Primeira Forma Normal (1FN): Não existem grupos de atributos repetidos, suas relações não possuem atributos multivalorados ou relações aninhadas, cada linha deve representar um registro e cada célula deve conter um único valor.
               Uma tabela 1FN deve estar de acordo com as seguintes informações:
                    - Os dados devem estar em valores atômicos, ou seja, indivisíveis;                         ter apenas um dado por coluna;
                    - Deve existir pelo menos uma chave primária;
                    - Se existirem atributos multivalorados, uma nova tabela será criada;
                    - Se existirem atributos compostos, eles serão desmembrados em novas colunas de dados.
          2 - Segunda Forma Normal (2FN): Deve estar, obrigatoriamente, na 1FN. Não deve ter atributos compostos ou multivalorados e nem dependências parciais.
               Com relação às chaves primarias compostas, a 2FN evige que todas as relações tenham dependência total. Sendo assim:
               Uma chave primária composta determina funcionalmente os atributos, não podendo existir um atributo que depende de uma parte dessa chave.
               Na 2FN, os dados:
                    - Já estão na 1FN;
                    - A chave primária precisa ser simples.
          3 - Terceira Forma Normal (3FN): Deve estar, obrigatoriamente, na 2FN e possuir dependência exclusiva da chave primária da tabela.
               Todos os seus atributos devem ser funcionalmente independentes.
               Na 3FN, os dados:
                    - Devem estar na 2FN;
                    - Os atributos não podem depender de outros que não são chaves.
          4 - Forma Normal de Boyce-Codd (FNBC):
               É uma melhoria da 3FN utilizada quando a tabela apresenta mais de uma chave candidata.
               Serve para separar, em novas tabelas, valores que ainda estejam redundantes no bando de dados.
               Cada forma normal é estritamente mais forte do que a anterior, então: 
                    - Toda relação da 2FN encontra-se na 1FN;
                    - Toda relação na 3FN encontra-se na 2FN.
                    - Toda relação FNBC está na 3FN.

Linguagens formais na consulta a banco de dados.
     Na criação de um banco de dados, o objetivo principal é o armazanamento.
     Usando as consultas que são implementadas na linguagem SQL, esses dados podem ser recuperados para o usuário ou para a aplicação do banco de dados.
     
     Álgebra relacional:
          A álgebra relacional é uma linguagem de consulta, onde os usuários passam instruções para o sistema executar e o mesmo executa o conjunto de instruções a fim de se obter um resultado desejado pelo usuário. O objetivo das instruções é acessar o banco de dados e coletar a informação que o usuário deseja.
          Dentro da álgebra relacional temos as seguintes nomeclaturas:
               - Tuplas: Linhas da tabela.
               - Atributos: Colunas da tabela.
               - Relação: A tabela.
          Tipos de operações:
               - Select:
                    Seleciona tuplas das tabelas para atender a uma solicitação e extrair informações.
                    Sintaxe: sigma<condição da seleção>(<nome da relação>).
               - Project:
                    Permite escolher e separar um conjunto determinado de colunas de uma tabela.
                    Sintaxe: pi<lista de atributos>(<nome da relação>).
               - Sequencialidade de operações:
                    Podemos combinar as operações de project e select. Assim, é possível extrair tuplas e colunas ao mesmo tempo.
                    Sintaxe: pi<lista de atributos>(sigma<condições de seleção>(nome da relação)).
                    Ex: Consulta 4 = pi nome, depto, salario(sigma salario < 2000(func)).

     Operações matemáticas:
          As relações podem ser tratadas como conjuntos, logo, pode-se aplicar operações matemáticas sobre elas.
          As operações são:
               - União: representada pelo símbolo U;
                    O resultado de uma união entre duas tabelas é uma nova tabela que inclui todas as tuplas que estão nas duas tabelas iniciais.
               - Interseção: representada pelo símbolo ∩;
                    Retorna uma tabela com apenas o que existem em comum entre as duas primeiras tabelas. 
               - Diferença:  representada pelo símbolo ≠.
                    Retorna uma tabela com todos os dados que pertecem a tabela
          Operações não unárias:
               Precisam necessariamente de mais de uma relação para acontecer.
               Atuam em relações compatíveis, ou seja, que possuem o mesmo grau ou mesmo número de atributos que têm o mesmo domínio.

SGBD's:
     O que podemos fazer através de um SGBD:
          - Criar relações entre tabelas.
          - Copiar e eliminar arquivos.
          - Alterar as estruturas dos campos.
          - Criar e gerir usuários.
          - Importar e exportar dados.

     Tipos de SGBDS:
          - Oracle:
               Um dos mais utulizados atualmente nas aplicações corporativas.
               Utiliza a linguagem PLSQL.
               Função: Acelerar o tratamento e a persistência dos dados.
               Seguro, confiável, robusto e de alta qualidade.

          - MySQL:
               Muito popular, usado principalmente na internet.
               Projetos simples e complexos.
               Utiliza linguagem SQL.
               Licença paga e gratuita.
               Utilizado pela NASA, Bradesco e Youtube...
          
          - SQL Server:
               Criado e mantido pela Microsoft.
               Robusto e atende uma demanda de negócios simples e complexos.
               Grandes volumes de dados.
               Utiliza a aplicação de inteligência artificial, proporcionando detecções mais certeiras de tendências e comportamentos por meio de dados.
          
          - Postgre SQL:
               Código aberto.
               Executada pela linguagem PSQL.
               Suporta grande parte do padrão SQL.
               Oferece muitos recursos modernos:
                    - Consultas complexas.
                    - Chaves estrangeiras.
                    - Gatilhos.
                    - Visualizações atualizáveis.
                    - Integridade transacional.
                    - Controle multiversão.

          - Firebird:
               Código aberto.
               Atende tanto clientes como servidores.
               Compartibilidade com o padrão SQL-92.
               Funciona em mais de 10 S.O.
               Desenvolvido do código-fonte do interbase 6.
          
          MariaDB:
               Código aberto.
               Construído pelos desenvolvedores do MySQL.
               Diferença entre MariaDB para o MySQL:
                    - Lincença GPL ou licença de software livre.
                    - O MySQL possui dupla licença: paga e gratuita.
          
          MongoDB:
               Orientado a documentos.
               Armazena seus registros sem nenhuma preocupação com a estrutura dos dados.
               Banco de dados NoSQL:
                    - Seus dados não são armazenados em tabelas.
